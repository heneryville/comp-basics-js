const assert = require('chai').assert;
const localMax = require('../local-maximum');
const distros = require('../utils/distributions');
const streams = require('../data/streams.json');
const _ = require('lodash');

describe('local-maximum',function(){
  describe('unsmoothed',function(){
    itIs('very obvious maximum',[0,1,0],[1])
    itIs('nothing gives nothing',[],[])
    itIs('monotonically increasing gives nothing',[0,1,2,3,4,5,6,7],[])
    itIs('monotonically decreasing gives nothing',[7,6,5,4,3,2,1],[])
    itIs('U gives nothing',[1,0,1],[])
    itIs('finds multiple local maxes',[0,1,0,0,0,1,0],[1,5])
    itIs('finds local maxes over multiple indexes',[0,1,2,2,2,3,2,1,0],[5])
    itIs('all flat is nothing',[2,2,2,2,2,2,2,2,2],[])
    itIs('the last of equal numbers is the maximum',[0,1,2,2,2,1,0],[4])
    itIs('it does terrible with noisy data',[-0.16,-0.46,-0.33,-0.14,0,-0.03,0,0.09,0.11,-0.09,-0.25,-0.2,-0.09,-0.09,-0.05,-0.24,-0.23,-0.17,-0.08,-0.12,-0.11,-0.12,0.03,-0.08,-0.03,0.11,0.02,-0.11,-0.2,-0.17,0.07,-0.02,-0.16,-0.1,0.02,0.09,0.04,0.09,0.03,-0.2,-0.02,0.11,0.54,0.62,0.78,0.85,0.34,-0.26,0.26,2.12,2.43,2.28,1.13,-1.78,-2.08,-1.21,-0.35,-1.45,-1.76,0.09,2.89,3.2,2.88,2.86,3.11,3.11,0.88,-6.48,-12.4,-29.3,-37.07,-33.26,-29.41,-0.77,69.43,88.45,66.34,48.68,30.09,25.66,15.2,-2.22,-21.59,-61.26,-89.84,-74.07,-42.31,5.54,43.1,69.07,49.64,37.87,32.78,12.16,-0.1,-9.58,-8.58,-4.56,2.61,2.83,2.67,1.91,0.82,1.49,-0.14,-2.66,-3.87,-4.69,-5.21,-5.43],[4,8,14,18,20,22,25,30,35,37,45,50,56,61,65,75,89,99,103])


    function itIs(name,input,expected) {
      it(name, function(){
        let actual = localMax.findLocalMaxima(input);
        assert.deepEqual(actual,expected);
      })
    }
  })

 describe('convolution',function(){
    itIs('identity kernel',[1],[0,1,2,3,4,5,6,7,8,9],[0,1,2,3,4,5,6,7,8,9])
    itIs('double kernel',[2],[0,1,2,3,4],[0,2,4,6,8])
    itIs('identity kernel with some truncation',[0,1,0],[0,1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8])
    itIs('double kernel with some truncation',[0,2,0],[0,1,2,3,4],[2,4,6])
    itIs('sobel',[-1,0,1],[0,1,2,3,4],[2,2,2])
    itIs('moving window average',[.2,.2,.2,.2,.2],[0,1,2,3,4,5,6,7,8,9],[2,3,4,5,6,7])
    itIs('gaussian moving average',[.05449022,.24421186,.40259583,.2442186,.05449022],[0,1,2,3,4,5,6,7,8,9],[2,3,4,5,6,7])
    itIs('it smooths noisy data',[.05449022,.24421186,.40259583,.2442186,.05449022],[-0.16,-0.46,-0.33,-0.14,0,-0.03,0,0.09,0.11,-0.09,-0.25,-0.2,-0.09,-0.09,-0.05,-0.24,-0.23,-0.17,-0.08,-0.12,-0.11,-0.12,0.03,-0.08,-0.03,0.11,0.02,-0.11,-0.2,-0.17,0.07,-0.02,-0.16,-0.1,0.02,0.09,0.04,0.09,0.03,-0.2,-0.02,0.11,0.54,0.62,0.78,0.85,0.34,-0.26,0.26,2.12,2.43,2.28,1.13,-1.78,-2.08,-1.21,-0.35,-1.45,-1.76,0.09,2.89,3.2,2.88,2.86,3.11,3.11,0.88,-6.48,-12.4,-29.3,-37.07,-33.26,-29.41,-0.77,69.43,88.45,66.34,48.68,30.09,25.66,15.2,-2.22,-21.59,-61.26,-89.84,-74.07,-42.31,5.54,43.1,69.07,49.64,37.87,32.78,12.16,-0.1,-9.58,-8.58,-4.56,2.61,2.83,2.67,1.91,0.82,1.49,-0.14,-2.66,-3.87,-4.69,-5.21,-5.43],
[-0.2881031187,-0.1636535378,-0.059497991,-0.0148023859,0.0206472424,0.056558844299999994,0.0306623797,-0.07641889429999998,-0.1703819405,-0.17336004459999999,-0.1234027367,-0.0943993189,-0.1181581933,-0.1791713274,-0.19980877789999998,-0.1637639861,-0.12155658940000001,-0.1105146582,-0.10562170750000001,-0.07874629020000001,-0.0443936671,-0.0327527708,-0.0020262666999999995,0.031490415699999996,-0.004481575399999998,-0.09151443730000001,-0.1439955128,-0.10727208970000002,-0.037835159300000004,-0.0447444218,-0.0888173102,-0.07063479320000002,-0.0009284217999999955,0.0503417037,0.0627870856,0.04733473289999999,-0.013696973300000007,-0.0671791382,0.0010291828000000038,0.1941652405,0.43709315199999993,0.6242849382,0.7209733042,0.6353425094999999,0.337635656,0.203689906,0.7098611736000001,1.6205196856,2.1285968239,1.805847005,0.5960987977,-0.8903313282,-1.5250985716,-1.2565815436999999,-0.9997643059,-1.1600918869,-0.902291025,0.40757039010000007,2.0280095825,2.8581746484000004,2.9663604583999996,2.9581073648,2.9149220241,2.0292296875,-0.9749674568000001,-6.8493240434,-15.702287186600001,-26.042909727799998,-32.4805816503,-31.264260897399996,-18.3875746267,12.4711430481,51.3776443393,71.3773189675,65.6201745216,49.365796475,34.7121236843,23.9226822064,12.3069345216,-4.394273876600001,-28.2621757557,-56.033212510999995,-72.7008246708,-65.1293506549,-36.3165038763,2.1511476615999996,35.97240599199999,52.8212568983,50.23584644699999,39.8007070911,28.1145381204,14.4179365274,1.9084057706,-5.5625591534,-6.770688204,-3.6615731825999993,0.30627047249999995,2.2844037325,2.4194094105,1.8566607039,1.2983192038,0.7250632428999999,-0.5083043918000001,-2.2245892542,-3.6445573207,-4.5464791267])


    function itIs(name,kernel,input,expected) {
      it(name, function(){
        let actual = localMax.convolve(kernel,input);
        console.log(JSON.stringify(actual))
        assert.lengthOf(actual,expected.length);
        for(let i =0; i<expected.length; ++i)
          assert.closeTo(actual[i],expected[i],.0001);
      })
    }
  })

 describe('smoothed',function(){
    itIs('it does terrible with noisy data',
      distros.gaussian(13,1.5), _.map(streams[0],'0'),[4,8,14,18,20,22,25,30,35,37,45,50,56,61,65,75,89,99,103])

    function itIs(name,kernel,input,expected) {
      it(name, function(){
        console.log('Stream length ',input.length)
        let actual = localMax.findLocalMaxima(input,kernel);
        console.log(JSON.stringify(actual))
        assert.deepEqual(actual,expected);
      })
    }
  })

})
